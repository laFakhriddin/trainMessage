stations = [720000, 720104, 720602, 720903, 721107, 721200, 721304, 721408, 721501, 721605, 721802, 722006, 722203,
            722307, 722400, 722504, 722608, 722701, 722805, 723009, 723102, 723206, 723307, 723403, 723507, 723600,
            723704, 723808, 724001, 724209, 724302, 724406, 724502, 724707, 724800, 724904, 725004, 725108, 725201,
            725305, 725502, 725606, 725708, 725803, 726007, 726100, 726204, 726308, 726401, 726505, 726609, 726702,
            726806, 726903, 727207, 727300, 727404, 727508, 727601, 727705, 727809, 727902, 728002, 728106, 728204,
            728407, 728500, 728604, 728708, 728801, 728905, 729005, 729109, 729202, 729306, 729400, 730002, 730106,
            730201, 730303, 730407, 730500, 730604, 730708, 730801, 730905, 731005, 731109, 731202, 731306, 731407,
            731503, 731607, 731700, 731804, 731908, 732008, 732101, 732205, 732309, 732402, 732506, 732602, 732703,
            732807, 732900, 733000, 733104, 733208, 733301, 733405, 733509, 733602, 733706, 733808, 733903, 734003,
            734107, 734200, 734304, 734408, 734501, 734605, 734709, 734802, 734906, 735006, 735109, 735203, 735307,
            735400, 735504, 735608, 735701, 735805, 735909, 736009, 736102, 736121, 736206, 736304, 736403, 736507,
            736600, 736704, 736808, 736901, 737001, 737105, 737209, 737302, 737406, 737500, 737603, 737707, 737800,
            737904, 738004, 738108, 738201, 738305, 738409, 738502, 738606, 738705, 738803, 738907, 739007, 739100,
            739204, 739308, 739401, 739505, 739609, 739702, 739806, 739900, 740004, 740108, 740201, 740305, 740409,
            740502, 740606, 740702, 740803, 740907, 741007, 741100, 741204, 741308, 741401, 741505, 741609, 741702,
            741806, 741908, 742003, 742103, 742207, 742300, 742404, 742508, 742705, 742809, 742902, 743002, 743209,
            743214, 743303, 743407, 743500, 743604, 743623, 743708, 743801, 743905, 744005, 744109, 744202, 744306,
            744404, 744607, 744700]

loads = {'Продукция мукомольно-крупяной промышленности': '11050000',
         'Злаки': '11050000',
         'Бобы соевые': '12010000',
         'Масло животного и растительного происхождения': '15122100',
         'Газовый конденсат': '27111900',
         'Сахар и изделия кондитерские из сахара': '17010000',
         'Напитки алкогольные, уксус': '22030000',
         'Табак и табачные изделия': '24010000',
         'Продукты перегонки нефти (транзит, импорт, экспорт)': '27090000',
         'Метанол': '29051100',
         'Спирты и фенолы, производные фенолов, эфиры': '270779980',
         'Медикаменты и химико-фармацевтическая продукция': '34070000',
         'Краски и лаки': '32080000',
         'Парфюмерные, косметические, туалетные средства': '33030000',
         'Каучук, резина и изделия из них': '40170000',
         'Шкуры необработанные, кожа выделанная': '41120000',
         'Мех и изделия из него': '43010000',
         'Шелк, коконы шелкопряда': '50010000',
         'Пряжа и ткань из волоса животного': '51060000',
         'Пряжа и ткани из растительных волокон и бумажной пряжи': '53060000',
         'Химические нити и волокна. Пряжа и ткани синтетические': '54010000',
         'Ювелирные и другие изделия': '71130000',
         'Металлопрокат и изделия из него': '72010000',
         'Цветные металлы и изделия из них': '74020000',
         'Котлы, машины, оборудование и механизмы. Кабели, провода': '84070000',
         'Средства наземного транспорта и относящиеся к транспорту устройства и оборудование': '86080000',
         'Инструменты и аппараты оптические, фотографические, кинематографические, измерительные, контрольные, прецизионные, медицинские, хирургические': '90010000',
         'Оружие, боеприпасы, кроме тех, которые должны сопровождаться в установленном порядке специалистами или часовыми воинских караулов, специальной милиции, военизированной охраной грузоотправителя (грузополучателя)': '93030000',
         'Произведения искусства, предметы коллекционирования и антиквариат': '97010000',
         'Цемент': '25232900'
         }


def checkTrainNumber(prompt):
    while True:
        try:
            value = input(prompt)
        except ValueError:
            print('----Ошибка форматного контроля----')
            print('Sorry, I didn\'t understand that.')
            continue
        if len(value) == 4:
            break
        print('---------Ошибка форматного контроля---------')
        print('Пожалуйста, введите номер поезда корректный: ')
        continue
    return value


def checkSenderStation(prompt):
    while True:
        try:
            value = int(input(prompt))
        except ValueError:
            print('-------------Ошибка форматного контроля-------------')
            print('Пожалуйста, введите корректный код станции передачи информации: ')
            continue
        if len(str(value)) == 6:
            break
        print('-------Ошибка форматного контроля-------')
        print('Извините, код должен состоять из 6 цифр: ')
        continue
    return value


def checkStation(prompt):
    while True:
        try:
            value = int(input(prompt))
        except ValueError:
            print('---------------Ошибка форматного контроля---------------')
            print('Пожалуйста, введите корректный код станции формирования: ')
            continue
        if len(str(value)) == 4:
            break
        print('-------Ошибка форматного контроля-------')
        print('Извините, код должен состоять из 4 цифр: ')
        continue
    return value


def loopForTrain(t):
    for i in stations:
        o = 0
        if str(t) in str(i):
            return t
        else:
            o += 1
    if o != 223:
        print('--------Нет такой станции--------')
        print('--------Ошибка логического контроля--------')
        t = checkSenderStation('Пожалуйста, введите код станции еще раз: ')
        t = loopForTrain(t)
    return t


def loopStation(s):
    for j in stations:
        o = 0
        if str(s) in str(j):
            return s
        else:
            o += 1
    if o != 223:
        print('--------Нет такой станции--------')
        print('--------Ошибка логического контроля--------')
        t = checkStation('Пожалуйста, введите код станции еще раз: ')
        t = loopStation(t)
    return s
